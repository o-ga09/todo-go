// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/user.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	reflect "reflect"
	driver "todo-go/driver"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDriver is a mock of UserDriver interface.
type MockUserDriver struct {
	ctrl     *gomock.Controller
	recorder *MockUserDriverMockRecorder
}

// MockUserDriverMockRecorder is the mock recorder for MockUserDriver.
type MockUserDriverMockRecorder struct {
	mock *MockUserDriver
}

// NewMockUserDriver creates a new mock instance.
func NewMockUserDriver(ctrl *gomock.Controller) *MockUserDriver {
	mock := &MockUserDriver{ctrl: ctrl}
	mock.recorder = &MockUserDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDriver) EXPECT() *MockUserDriverMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDriver) Create(arg0 driver.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserDriverMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDriver)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockUserDriver) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserDriverMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDriver)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockUserDriver) GetAll() []driver.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]driver.User)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserDriverMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserDriver)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockUserDriver) GetById(arg0 int) driver.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(driver.User)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockUserDriverMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserDriver)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockUserDriver) Update(id int, user driver.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserDriverMockRecorder) Update(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDriver)(nil).Update), id, user)
}
