// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/port/interface.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"
	domain "todo-go/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUserPort is a mock of UserPort interface.
type MockUserPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserPortMockRecorder
}

// MockUserPortMockRecorder is the mock recorder for MockUserPort.
type MockUserPortMockRecorder struct {
	mock *MockUserPort
}

// NewMockUserPort creates a new mock instance.
func NewMockUserPort(ctrl *gomock.Controller) *MockUserPort {
	mock := &MockUserPort{ctrl: ctrl}
	mock.recorder = &MockUserPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPort) EXPECT() *MockUserPortMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserPort) Create(arg0 domain.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserPortMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserPort)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockUserPort) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserPortMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserPort)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockUserPort) GetAll() []domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.User)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserPortMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserPort)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockUserPort) GetById(arg0 int) domain.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.User)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockUserPortMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserPort)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockUserPort) Update(id int, user domain.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserPortMockRecorder) Update(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserPort)(nil).Update), id, user)
}

// MockTaskPort is a mock of TaskPort interface.
type MockTaskPort struct {
	ctrl     *gomock.Controller
	recorder *MockTaskPortMockRecorder
}

// MockTaskPortMockRecorder is the mock recorder for MockTaskPort.
type MockTaskPortMockRecorder struct {
	mock *MockTaskPort
}

// NewMockTaskPort creates a new mock instance.
func NewMockTaskPort(ctrl *gomock.Controller) *MockTaskPort {
	mock := &MockTaskPort{ctrl: ctrl}
	mock.recorder = &MockTaskPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskPort) EXPECT() *MockTaskPortMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskPort) Create(arg0 domain.TaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskPortMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskPort)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockTaskPort) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskPortMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskPort)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockTaskPort) GetAll() []domain.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Task)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskPortMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskPort)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockTaskPort) GetById(arg0 int) domain.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.Task)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockTaskPortMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTaskPort)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockTaskPort) Update(id int, user domain.TaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskPortMockRecorder) Update(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskPort)(nil).Update), id, user)
}
