// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/todo.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	reflect "reflect"
	driver "todo-go/driver"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskDriver is a mock of TaskDriver interface.
type MockTaskDriver struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDriverMockRecorder
}

// MockTaskDriverMockRecorder is the mock recorder for MockTaskDriver.
type MockTaskDriverMockRecorder struct {
	mock *MockTaskDriver
}

// NewMockTaskDriver creates a new mock instance.
func NewMockTaskDriver(ctrl *gomock.Controller) *MockTaskDriver {
	mock := &MockTaskDriver{ctrl: ctrl}
	mock.recorder = &MockTaskDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDriver) EXPECT() *MockTaskDriverMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskDriver) Create(arg0 driver.TaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskDriverMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskDriver)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockTaskDriver) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskDriverMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskDriver)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockTaskDriver) GetAll() []driver.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]driver.Task)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskDriverMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskDriver)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockTaskDriver) GetById(arg0 int) driver.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(driver.Task)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockTaskDriverMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTaskDriver)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockTaskDriver) Update(id int, task driver.TaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskDriverMockRecorder) Update(id, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskDriver)(nil).Update), id, task)
}
